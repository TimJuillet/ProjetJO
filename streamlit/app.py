import streamlit as st
import pandas as pd
import requests
from rdflib import Graph, Namespace, URIRef, OWL, RDF, RDFS
from pyvis.network import Network
import networkx as nx
import json
import tempfile
from streamlit_folium import folium_static
import folium

# Configuration de la page
st.set_page_config(
    page_title="JO Paris 2024 - Explorateur SPARQL",
    page_icon="üèÖ",
    layout="wide"
)

# Cr√©ation des namespaces
OLYMPICS = Namespace("http://example.org/olympics#")

# D√©finition des requ√™tes SPARQL avec gestion des pr√©fixes
PRESET_QUERIES = {
    "Liste des stades": """
    PREFIX : <http://example.org/olympics#>
    PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
    PREFIX owl: <http://www.w3.org/2002/07/owl#>
    SELECT ?venue ?name ?capacity WHERE {
        ?venue rdf:type :Venue ;
            :name ?name ;
            :hasCapacity ?capacity .
    }
    ORDER BY ?name
    """,
    
    "Stades par capacit√©": """
    PREFIX : <http://example.org/olympics#>
    PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
    SELECT ?name ?capacity ?description WHERE {
        ?venue rdf:type :Venue ;
            :name ?name ;
            :description ?description ;
            :hasCapacity ?capacity .
    }
    ORDER BY DESC(?capacity)
    """,
    
    "Coordonn√©es des stades": """
    PREFIX : <http://example.org/olympics#>
    PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
    SELECT ?name ?lat ?lon WHERE {
        ?venue rdf:type :Venue ;
            :name ?name ;
            :hasCoordinate ?coord .
        ?coord :hasLatitude ?lat ;
               :hasLongitude ?lon .
    }
    """,
    
    "Informations compl√®tes des stades": """
    PREFIX : <http://example.org/olympics#>
    PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
    SELECT ?name ?description ?capacity ?lat ?lon WHERE {
        ?venue rdf:type :Venue ;
            :name ?name ;
            :description ?description ;
            :hasCapacity ?capacity ;
            :hasCoordinate ?coord .
        ?coord :hasLatitude ?lat ;
               :hasLongitude ?lon .
    }
    """,
    
    "Service Stade de France": """
    PREFIX : <http://example.org/olympics#>
    PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
    SELECT * WHERE {
        SERVICE <http://localhost/service/JO/getInfosStade?name=STADE DE FRANCE> {
            ?x ?y ?z
        }
    }
    """,
    
    "Visualisation des relations": """
    PREFIX : <http://example.org/olympics#>
    PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
    PREFIX owl: <http://www.w3.org/2002/07/owl#>
    CONSTRUCT {
        ?s ?p ?o
    }
    WHERE {
        ?s ?p ?o .
        FILTER(?s != owl:Class)
        FILTER(!isBlank(?s))
        FILTER(!isBlank(?o))
    }
    LIMIT 1000
    """
}

@st.cache_resource
def load_graph():
    """Charge les donn√©es RDF depuis les fichiers Turtle avec gestion d'erreurs am√©lior√©e"""
    g = Graph()
    
    # Bind des namespaces
    g.bind('olympics', OLYMPICS)
    g.bind('owl', OWL)
    g.bind('rdf', RDF)
    g.bind('rdfs', RDFS)
    
    try:
        # Charger les fichiers individuellement avec gestion d'erreurs
        for file_path in ["../data/struct/olympic.ttl", "../data/data/output_og_24.ttl"]:
            try:
                g.parse(file_path, format="turtle")
                st.sidebar.success(f"Fichier {file_path} charg√© avec succ√®s")
            except Exception as e:
                st.sidebar.warning(f"Erreur lors du chargement de {file_path}: {str(e)}")
                st.sidebar.info("Tentative de continuer avec les donn√©es disponibles...")
                continue
        
        return g
    except Exception as e:
        st.error(f"Erreur critique lors du chargement des donn√©es: {str(e)}")
        return None

def execute_query(g, query):
    """Ex√©cute une requ√™te SPARQL avec gestion d'erreurs am√©lior√©e"""
    if g is None:
        st.error("Graphe non initialis√©")
        return None
        
    try:
        if "CONSTRUCT" in query:
            return g.query(query)
        results = g.query(query)
        return pd.DataFrame(results, columns=results.vars)
    except Exception as e:
        st.error(f"Erreur lors de l'ex√©cution de la requ√™te: {str(e)}")
        return None

def create_graph_visualization(construct_results):
    """Cr√©e une visualisation du graphe avec pyvis"""
    if construct_results is None:
        st.error("Pas de donn√©es √† visualiser")
        return
        
    net = Network(height="750px", width="100%", bgcolor="#ffffff", font_color="black")
    net.toggle_hide_edges_on_drag(True)
    net.barnes_hut()
    
    # Ajout des n≈ìuds et des ar√™tes
    added_nodes = set()
    for s, p, o in construct_results:
        # Conversion des URIs en cha√Ænes plus lisibles
        s_label = str(s).split('#')[-1]
        p_label = str(p).split('#')[-1]
        o_label = str(o).split('#')[-1]
        
        # Ajout des n≈ìuds s'ils n'existent pas d√©j√†
        if s_label not in added_nodes:
            net.add_node(s_label, label=s_label, title=str(s))
            added_nodes.add(s_label)
        if o_label not in added_nodes:
            net.add_node(o_label, label=o_label, title=str(o))
            added_nodes.add(o_label)
            
        # Ajout de l'ar√™te
        net.add_edge(s_label, o_label, label=p_label, title=str(p))
    
    # Configuration du graphe
    net.set_options("""
    {
        "physics": {
            "barnesHut": {
                "gravitationalConstant": -2000,
                "centralGravity": 0.3,
                "springLength": 200
            },
            "maxVelocity": 50,
            "minVelocity": 0.75,
            "solver": "barnesHut"
        },
        "edges": {
            "smooth": {
                "type": "continuous",
                "forceDirection": "none"
            }
        }
    }
    """)
    
    # Sauvegarde temporaire et affichage
    with tempfile.NamedTemporaryFile(delete=False, suffix='.html') as tmp:
        net.save_graph(tmp.name)
        with open(tmp.name, 'r', encoding='utf-8') as f:
            html_string = f.read()
        st.components.v1.html(html_string, height=800)

def create_map(df):
    """Cr√©e une carte avec les stades"""
    if df is None or df.empty:
        st.error("Pas de donn√©es √† afficher sur la carte")
        return
        
    try:
        m = folium.Map(location=[48.8566, 2.3522], zoom_start=11)
        
        for idx, row in df.iterrows():
            folium.Marker(
                [float(row['lat']), float(row['lon'])],
                popup=f"{row['name']}<br>Capacit√©: {row['capacity']}<br>{row['description']}",
                tooltip=row['name']
            ).add_to(m)
        
        folium_static(m)
    except Exception as e:
        st.error(f"Erreur lors de la cr√©ation de la carte: {str(e)}")

def main():
    st.title("üèÖ Explorateur SPARQL - JO Paris 2024")
    
    # Chargement du graphe
    g = load_graph()
    if g is None:
        st.error("Impossible de continuer sans donn√©es valides")
        return
    
    # Sidebar pour la s√©lection des requ√™tes
    st.sidebar.title("Navigation")
    query_choice = st.sidebar.radio(
        "Choisissez une requ√™te pr√©-enregistr√©e",
        list(PRESET_QUERIES.keys())
    )
    
    # Zone principale
    st.header("R√©sultats de la requ√™te")
    
    # Affichage de la requ√™te SPARQL
    with st.expander("Voir la requ√™te SPARQL"):
        st.code(PRESET_QUERIES[query_choice], language="sparql")
    
    # Ex√©cution de la requ√™te
    results = execute_query(g, PRESET_QUERIES[query_choice])
    
    if query_choice == "Visualisation des relations":
        # Affichage du graphe de relations
        create_graph_visualization(results)
    elif query_choice == "Informations compl√®tes des stades":
        # Affichage du tableau et de la carte
        if isinstance(results, pd.DataFrame) and not results.empty:
            st.dataframe(results, use_container_width=True)
            create_map(results)
    else:
        # Affichage standard des r√©sultats
        if isinstance(results, pd.DataFrame) and not results.empty:
            st.dataframe(results, use_container_width=True)
            
            # M√©triques pour les requ√™tes avec capacit√©
            if 'capacity' in results.columns:
                col1, col2, col3 = st.columns(3)
                with col1:
                    st.metric("Nombre de sites", len(results))
                with col2:
                    st.metric("Capacit√© totale", f"{results['capacity'].sum():,}")
                with col3:
                    st.metric("Capacit√© moyenne", f"{int(results['capacity'].mean()):,}")
    
    # Export des donn√©es
    if isinstance(results, pd.DataFrame) and not results.empty:
        st.sidebar.download_button(
            label="üì• T√©l√©charger les r√©sultats (CSV)",
            data=results.to_csv(index=False).encode('utf-8'),
            file_name=f"jo_paris_2024_{query_choice.lower().replace(' ', '_')}.csv",
            mime="text/csv"
        )

if __name__ == "__main__":
    main()